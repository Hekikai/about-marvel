{"version":3,"file":"static/js/124.115babe8.chunk.js","mappings":"iIAWA,IARqB,WACpB,OACC,gBACCA,MAAO,CAACC,QAAS,QAASC,OAAQ,YAAaC,MAAO,QACtDC,IAAKC,EAAUC,IAAI,kB,6ICmChBC,EAAO,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEPC,EAA6DD,EAA7DC,MAAOC,EAAsDF,EAAtDE,YAAaC,EAAyCH,EAAzCG,UAAWC,EAA8BJ,EAA9BI,UAAWC,EAAmBL,EAAnBK,SAAUC,EAASN,EAATM,MAE3D,OACC,iBAAKC,UAAU,eAAf,WACC,gBAAKX,IAAMQ,EAAYN,IAAKG,EAAOM,UAAU,uBAC7C,iBAAKA,UAAU,qBAAf,WACC,eAAIA,UAAU,qBAAd,SAAoCN,KACpC,cAAGM,UAAU,sBAAb,SAAoCL,KACpC,cAAGK,UAAU,sBAAb,SAAoCJ,KACpC,eAAGI,UAAU,sBAAb,uBAA8CF,MAC9C,gBAAKE,UAAU,sBAAf,SAAsCD,QAEvC,SAAC,KAAD,CAAME,GAAG,UAAUD,UAAU,qBAA7B,6BAKH,EApDwB,WAEvB,IAAOE,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOX,EAAP,KAAcY,EAAd,KACA,GAA+CC,EAAAA,EAAAA,KAAxCC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,YAEjCC,EAAAA,EAAAA,YAAU,WACTC,MACE,CAACV,IAEJ,IAAMW,EAAgB,SAACpB,GACtBY,EAASZ,IAGJmB,EAAc,WACnBF,IACAD,EAASP,GACPY,KAAKD,IAGFE,EAAeP,GAAQ,SAACQ,EAAA,EAAD,IAAkB,KACzCC,EAAiBV,GAAU,SAACW,EAAA,EAAD,IAAa,KACxCC,EAAYZ,GAAWC,IAAUf,EAAiC,MAAxB,SAACD,EAAD,CAAMC,MAAOA,IAE7D,OACC,gCACEsB,EACAE,EACAE,O,qGCuBJ,EA1DyB,WACxB,MCDsB,WACtB,OAA8Bf,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBa,EAAhB,KACA,GAA0BhB,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAca,EAAd,KAEMC,GAAUC,EAAAA,EAAAA,aAAW,mCAAC,WAAMC,GAAN,kGAAWC,EAAX,+BAAoB,MAAOC,EAA3B,+BAAkC,KAAMC,EAAxC,+BAAkD,CAC7E,eACC,oBAGDP,GAAW,GALgB,kBAQHQ,MAAMJ,EAAK,CAACC,OAAAA,EAAQE,QAAAA,EAASD,KAAAA,IAR1B,WAQpBG,EARoB,QASZC,GATY,uBAUnB,IAAIC,MAAJ,0BAA8BP,EAA9B,qBAAgDK,EAASG,SAVtC,yBAYPH,EAASI,OAZF,eAYpBC,EAZoB,OAc1Bd,GAAW,GAde,kBAenBc,GAfmB,wCAiB1Bd,GAAW,GACXC,EAAS,KAAMc,SAlBW,+DAAD,sDAsBxB,IAIH,MAAO,CAAC5B,QAAAA,EAASC,MAAAA,EAAOc,QAAAA,EAASZ,YAFda,EAAAA,EAAAA,cAAY,kBAAMF,EAAS,QAAO,KD3BPe,GAAvC7B,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOc,EAAvB,EAAuBA,QAASZ,EAAhC,EAAgCA,WAE1B2B,EAAW,4CACXC,EAAU,0CAGVC,EAAgB,mCAAG,yGAAMC,EAAN,+BAFL,IAEK,SACHlB,EAAQ,GAAD,OAAKe,EAAL,qCAA4CG,EAA5C,YAAwDF,IAD5D,cAClBG,EADkB,yBAEjBA,EAAOP,KAAKQ,QAAQC,IAAIC,IAFP,2CAAH,qDAKhBC,EAAY,mCAAG,WAAMC,GAAN,uFACCxB,EAAQ,GAAD,OAAKe,EAAL,sBAA6BS,EAA7B,YAAqCR,IAD7C,cACdG,EADc,yBAEbG,EAAoBH,EAAOP,KAAKQ,QAAQ,KAF3B,2CAAH,sDAKZK,EAAY,mCAAG,yGAAMP,EAAN,+BAAe,EAAf,SACClB,EAAQ,GAAD,OAAKe,EAAL,qDAA4DG,EAA5D,YAAwEF,IADhF,cACdG,EADc,yBAEbA,EAAOP,KAAKQ,QAAQC,IAAIK,IAFX,2CAAH,qDAKZvC,EAAQ,mCAAG,WAAMqC,GAAN,uFACKxB,EAAQ,GAAD,OAAKe,EAAL,kBAAyBS,EAAzB,YAAiCR,IAD7C,cACVG,EADU,yBAETO,EAAiBP,EAAOP,KAAKQ,QAAQ,KAF5B,2CAAH,sDAKRM,EAAmB,SAACC,GACzB,MAAO,CACNH,GAAIG,EAAOH,GACXpD,MAAOuD,EAAOvD,MACdC,YAAasD,EAAOtD,aAAe,0BACnCC,UAAWqD,EAAOrD,UAAP,UAAuBqD,EAAOrD,UAA9B,OAAgD,2CAE3DC,UAAWoD,EAAOpD,UAAUqD,KAAO,IAAMD,EAAOpD,UAAUsD,UAC1DrD,SAAUmD,EAAOG,YAAYtD,UAAY,QACzCC,MAAOkD,EAAOI,OAAOtD,MAAd,UAA0BkD,EAAOI,OAAOtD,MAAxC,KAAoD,kBAIvD6C,EAAsB,SAACU,GAC5B,MAAO,CACNR,GAAIQ,EAAUR,GACdS,KAAMD,EAAUC,KAChB5D,YAAa2D,EAAU3D,YAAV,UACN2D,EAAU3D,YAAY6D,MAAM,EAAG,KADzB,OAEV,6CACH3D,UAAWyD,EAAUzD,UAAUqD,KAAO,IACrCI,EAAUzD,UAAUsD,UACrBM,SAAUH,EAAUI,KAAK,GAAGlC,IAC5BmC,SAAUL,EAAUI,KAAK,GAAGlC,IAC5ByB,OAAQK,EAAUL,OAAOW,MAAMJ,MAAM,EAAG,MAI1C,MAAO,CAACjD,QAAAA,EAASC,MAAAA,EAAOE,WAAAA,EAAY6B,iBAAAA,EAAkBM,aAAAA,EAAcE,aAAAA,EAActC,SAAAA,K","sources":["components/errorMessage/ErrorMessage.js","components/pages/singleComicPage/SingleComicPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import React from 'react';\r\nimport imgError from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img\r\n\t\t\tstyle={{display: 'block', margin: '2rem auto', width: '96px' }}\r\n\t\t\tsrc={imgError} alt=\"Danger icon\"/>\r\n\t);\r\n};\r\n\r\nexport default ErrorMessage;","import { useParams, Link } from \"react-router-dom\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport useMarvelService from \"../../../services/MarvelService\";\r\nimport ErrorMessage from \"../../errorMessage/ErrorMessage\";\r\nimport Spinner from \"../../spinner/Spinner\";\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n\r\n\tconst {comicId} = useParams();\r\n\tconst [comic, setComic] = useState(null);\r\n\tconst {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateComic();\r\n\t}, [comicId])\r\n\r\n\tconst onComicLoaded = (comic) => {\r\n\t\tsetComic(comic);\r\n\t};\r\n\r\n\tconst updateComic = () => {\r\n\t\tclearError();\r\n\t\tgetComic(comicId)\r\n\t\t\t.then(onComicLoaded)\r\n\t};\r\n\r\n\tconst errorMessage = error ? <ErrorMessage/> : null;\r\n\tconst loadingSpinner = loading ? <Spinner/> : null;\r\n\tconst content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{errorMessage}\r\n\t\t\t{loadingSpinner}\r\n\t\t\t{content}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst View = ({comic}) => {\r\n\r\n\tconst {title, description, pageCount, thumbnail, language, price} = comic;\r\n\r\n\treturn (\r\n\t\t<div className=\"single-comic\">\r\n\t\t\t<img src={ thumbnail } alt={title} className=\"single-comic__img\"/>\r\n\t\t\t<div className=\"single-comic__info\">\r\n\t\t\t\t<h2 className=\"single-comic__name\">{title}</h2>\r\n\t\t\t\t<p className=\"single-comic__descr\">{description}</p>\r\n\t\t\t\t<p className=\"single-comic__descr\">{pageCount}</p>\r\n\t\t\t\t<p className=\"single-comic__descr\">Language: {language}</p>\r\n\t\t\t\t<div className=\"single-comic__price\">{price}</div>\r\n\t\t\t</div>\r\n\t\t\t<Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SingleComicPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst {loading, error, request, clearError} = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=3b46640549182f2ab56a8cc596f5e343';\r\n\tconst _baseOffset = 215;\r\n\r\n\tconst getAllCharacters = async(offset = _baseOffset) => {\r\n\t\tconst result = await request(`${ _apiBase }characters?limit=9&offset=${ offset }&${ _apiKey }`);\r\n\t\treturn result.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async(id) => {\r\n\t\tconst result = await request(`${ _apiBase }characters/${ id }?${ _apiKey }`);\r\n\t\treturn _transformCharacter(result.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async(offset = 0) => {\r\n\t\tconst result = await request(`${ _apiBase }comics?orderBy=issueNumber&limit=8&offset=${ offset }&${ _apiKey }`);\r\n\t\treturn result.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComic = async(id) => {\r\n\t\tconst result = await request(`${ _apiBase }comics/${ id }?${ _apiKey }`);\r\n\t\treturn _transformComics(result.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || 'There is no description',\r\n\t\t\tpageCount: comics.pageCount ? `${ comics.pageCount } p.` : 'No information about the' +\r\n\t\t\t\t' number of pages',\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects.language || 'en-us',\r\n\t\t\tprice: comics.prices.price ? `${ comics.prices.price }$` : 'not available'\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformCharacter = (character) => {\r\n\t\treturn {\r\n\t\t\tid: character.id,\r\n\t\t\tname: character.name,\r\n\t\t\tdescription: character.description\r\n\t\t\t\t? `${ character.description.slice(0, 210) }...`\r\n\t\t\t\t: 'There is no description for this character',\r\n\t\t\tthumbnail: character.thumbnail.path + '.' +\r\n\t\t\t\tcharacter.thumbnail.extension,\r\n\t\t\thomePage: character.urls[0].url,\r\n\t\t\twikiPage: character.urls[1].url,\r\n\t\t\tcomics: character.comics.items.slice(0, 10)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async(url, method = 'GET', body = null, headers = {\r\n\t\t'Content-Type':\r\n\t\t\t'application/json'\r\n\t}) => {\r\n\r\n\t\tsetLoading(true);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, headers, body});\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${ url }, status: ${ response.status }`);\r\n\t\t\t}\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\tsetLoading(false);\r\n\t\t\treturn data;\r\n\t\t} catch (error) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetError(error.message);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => setError(null), []);\r\n\r\n\treturn {loading, error, request, clearError};\r\n};\r\n"],"names":["style","display","margin","width","src","imgError","alt","View","comic","title","description","pageCount","thumbnail","language","price","className","to","comicId","useParams","useState","setComic","useMarvelService","loading","error","getComic","clearError","useEffect","updateComic","onComicLoaded","then","errorMessage","ErrorMessage","loadingSpinner","Spinner","content","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","result","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","comics","path","extension","textObjects","prices","character","name","slice","homePage","urls","wikiPage","items"],"sourceRoot":""}