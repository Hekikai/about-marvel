{"version":3,"file":"static/js/99.620335c1.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import React from 'react';\r\nimport imgError from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img\r\n\t\t\tstyle={{display: 'block', margin: '2rem auto', width: '96px' }}\r\n\t\t\tsrc={imgError} alt=\"Danger icon\"/>\r\n\t);\r\n};\r\n\r\nexport default ErrorMessage;","import avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nimport './appBanner.scss';\n\nconst AppBanner = () => {\n\treturn (\n\t\t<div className=\"app__banner\">\n\t\t\t<img src={ avengers } alt=\"Avengers\"/>\n\t\t\t<div className=\"app__banner-text\">\n\t\t\t\tNew comics every week!<br/>\n\t\t\t\tStay tuned!\n\t\t\t</div>\n\t\t\t<img src={ avengersLogo } alt=\"Avengers logo\"/>\n\t\t</div>\n\t)\n}\n\nexport default AppBanner;","import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n\tconst [comicsList, setComicsList] = useState([]);\n\tconst [newCharLoading, setNewCharLoading] = useState(false);\n\tconst [offset, setOffset] = useState(0);\n\tconst [comicsEnded, setComicsEnded] = useState(false);\n\n\tconst {loading, error, getAllComics} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, [])\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setNewCharLoading(false) : setNewCharLoading(true);\n\t\tgetAllComics(offset)\n\t\t\t.then(onComicsListLoaded)\n\t}\n\n\tconst onComicsListLoaded = (newComicsList) => {\n\t\tlet ended = false;\n\t\tif (newComicsList.length < 8) {\n\t\t\tended = true;\n\t\t}\n\n\t\tsetComicsList([...comicsList, ...newComicsList]);\n\t\tsetNewCharLoading(false);\n\t\tsetOffset((offset) => offset + 8);\n\t\tsetComicsEnded(ended);\n\t};\n\n\tconst renderItems = (array) => {\n\t\tconst elements = array.map((elem, index) => {\n\t\t\treturn (\n\t\t\t\t<li className=\"comics__item\" key={ index }>\n\t\t\t\t\t<Link to={ `/comics/${ elem.id }` }>\n\t\t\t\t\t\t<img src={ elem.thumbnail } alt={ elem.title }\n\t\t\t\t\t\t\t className=\"comics__item-img\"/>\n\t\t\t\t\t\t<div className=\"comics__item-name\">{ elem.title }\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"comics__item-price\">{ elem.price }</div>\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t);\n\t\t})\n\n\t\treturn (\n\t\t\t<ul className=\"comics__grid\">\n\t\t\t\t{ elements }\n\t\t\t</ul>\n\t\t)\n\t}\n\n\tconst items = renderItems(comicsList);\n\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst loadingSpinner = loading && !newCharLoading ? <Spinner/> : null;\n\treturn (\n\t\t<div className=\"comics__list\">\n\t\t\t{ errorMessage }\n\t\t\t{ loadingSpinner }\n\t\t\t{ items }\n\t\t\t<button\n\t\t\t\tdisabled={ newCharLoading }\n\t\t\t\tstyle={ {'display': comicsEnded ? 'none' : 'block'} }\n\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\tonClick={ () => onRequest(offset) }>\n\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<AppBanner/>\r\n\t\t\t<ComicsList/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default ComicsPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst {loading, error, request, clearError} = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=3b46640549182f2ab56a8cc596f5e343';\r\n\tconst _baseOffset = 215;\r\n\r\n\tconst getAllCharacters = async(offset = _baseOffset) => {\r\n\t\tconst result = await request(`${ _apiBase }characters?limit=9&offset=${ offset }&${ _apiKey }`);\r\n\t\treturn result.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async(id) => {\r\n\t\tconst result = await request(`${ _apiBase }characters/${ id }?${ _apiKey }`);\r\n\t\treturn _transformCharacter(result.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async(offset = 0) => {\r\n\t\tconst result = await request(`${ _apiBase }comics?orderBy=issueNumber&limit=8&offset=${ offset }&${ _apiKey }`);\r\n\t\treturn result.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComic = async(id) => {\r\n\t\tconst result = await request(`${ _apiBase }comics/${ id }?${ _apiKey }`);\r\n\t\treturn _transformComics(result.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || 'There is no description',\r\n\t\t\tpageCount: comics.pageCount ? `${ comics.pageCount } p.` : 'No information about the' +\r\n\t\t\t\t' number of pages',\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects.language || 'en-us',\r\n\t\t\tprice: comics.prices.price ? `${ comics.prices.price }$` : 'not available'\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformCharacter = (character) => {\r\n\t\treturn {\r\n\t\t\tid: character.id,\r\n\t\t\tname: character.name,\r\n\t\t\tdescription: character.description\r\n\t\t\t\t? `${ character.description.slice(0, 210) }...`\r\n\t\t\t\t: 'There is no description for this character',\r\n\t\t\tthumbnail: character.thumbnail.path + '.' +\r\n\t\t\t\tcharacter.thumbnail.extension,\r\n\t\t\thomePage: character.urls[0].url,\r\n\t\t\twikiPage: character.urls[1].url,\r\n\t\t\tcomics: character.comics.items.slice(0, 10)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async(url, method = 'GET', body = null, headers = {\r\n\t\t'Content-Type':\r\n\t\t\t'application/json'\r\n\t}) => {\r\n\r\n\t\tsetLoading(true);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, headers, body});\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${ url }, status: ${ response.status }`);\r\n\t\t\t}\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\tsetLoading(false);\r\n\t\t\treturn data;\r\n\t\t} catch (error) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetError(error.message);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => setError(null), []);\r\n\r\n\treturn {loading, error, request, clearError};\r\n};\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["style","display","margin","width","src","imgError","alt","className","avengers","avengersLogo","useState","comicsList","setComicsList","newCharLoading","setNewCharLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","array","elements","map","elem","index","to","id","thumbnail","title","price","renderItems","errorMessage","ErrorMessage","loadingSpinner","Spinner","disabled","onClick","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","result","results","_transformCharacter","getCharacter","_transformComics","getComic","comics","description","pageCount","path","extension","language","textObjects","prices","character","name","slice","homePage","urls","wikiPage","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}